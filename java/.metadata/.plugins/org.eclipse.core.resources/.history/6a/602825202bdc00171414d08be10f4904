package main;

public class ArraySorter {
	public int[] heapSort(int[] heap) {
		int[] out = new int[heap.length];
		for(int i = 0; i < out.length; i++) {
			out[i] = -1;
		}
		for(int i = 0; i < heap.length; i++) {
			out = insert(out, heap[i]);
			//printHeapFlat(out);
		}
		return out;
	}
	
	int[] insert(int[] array, int n) {
	  int a = 0;
	  int[] out = array;
	  
	  while(out[a] >= 0) {
	    a++;
	    if(a >= out.length) return array;
	  }
	  out[a] = n; //a is the index of the first empty space
	  int parent = indexParent(a);
	  System.out.print(parent + ")");
	  int i = 0;
	  while(i <= 8) {
		  parent = indexParent(a);
	    if(parent >= 0 && out[a] < out[parent]) {
	      out = swap(out,a,parent);
	    }
	    a = parent;
	    i++;
	    printHeapFlat(out);
	  }
	  System.out.print("\n");
	  return out;
	}
	
	int[] swap(int[] array, int a, int b) {
	  int[] out = array;
	  int temp = out[a];
	  out[a] = out[b];
	  out[b] = temp;
	  return out;
	}
	int findChild1(int[] heap, int n) {
	  return heap[(n << 1) + 1];
	}
	int findChild2(int[] heap, int n) {
	  return heap[(n << 1) + 2];
	}
	int findParent(int[] heap, int n) {
	  return heap[indexParent(n)];
	}
	int indexParent(int n) {
	  return (n - 1) >> 1;
	  /* 0123456789ABCDE
	   * x00112233445566
	   */
	}
	int getDepth(int n) {
	  return (int)(Math.log(n+1)/Math.log(2));
	}

	int powInt(int pow, int n) {
	  int out = 1;
	  for(int i = 0; i < pow; i++) {
	    out *= n;
	  }
	  return out;
	}
	
	void printHeap(int[] heap) {
		for(int i = 0; i < heap.length; i++) {
			System.out.print(heap[i]);
			if(i+1 < heap.length) System.out.print(", ");
			else System.out.print(".");
			if(i == 0 || i == 2 || i == 6 || i == 14 || i == 30) System.out.print("\n");
		}
	}
	void printHeapFlat(int[] heap) {
		for(int i = 0; i < heap.length; i++) {
			System.out.print(heap[i]);
			if((i == 0 || i == 2 || i == 6 || i == 14 || i == 30) && (i+1 < heap.length)) System.out.print(".  ");
			else if(i+1 < heap.length) System.out.print(", ");
			else System.out.print(".\n");
		}
	}
}
