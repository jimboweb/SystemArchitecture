package main;

public class ArraySorter {
	
	public int[] heapSort(int[] heap) {
		for() {
			
		}
	}
	
	int[] insert(int[] array, int n) {
	  int a = 0;
	  int[] out = array;
	  while(out[a] != -1) {
	    a++;
	    if(a >= out.length) return array;
	  }
	  out[a] = n;
	  int b = indexParent(array,a);
	  while(b >= 0) {
	    b = indexParent(array,a);
	    if(b >= 0) if(out[a] < out[b]) {
	      out = swap(out,a,b);
	    };
	    a = b;
	  }
	  return out;
	}
	int[] swap(int[] array, int a, int b) {
	  int[] out = array;
	  int temp = out[a];
	  out[a] = out[b];
	  out[b] = temp;
	  return out;
	}
	int findChild1(int[] heap, int n) {
	  return heap[(n << 1) + 1];
	}
	int findChild2(int[] heap, int n) {
	  return heap[(n << 1) + 2];
	}
	int findParent(int[] heap, int n) {
	  return heap[(n - 1) >> 1];
	}
	int indexParent(int[] heap, int n) {
	  return (n - 1) >> 1;
	}
	int getDepth(int n) {
	  return (int)(Math.log(n+1)/Math.log(2));
	}

	int powInt(int pow, int n) {
	  int out = 1;
	  for(int i = 0; i < pow; i++) {
	    out *= n;
	  }
	  return out;
	}
}
